// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bubobubo.domain;

import com.bubobubo.domain.Users;
import com.bubobubo.domain.UsersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UsersDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsersDataOnDemand: @Component;
    
    private Random UsersDataOnDemand.rnd = new SecureRandom();
    
    private List<Users> UsersDataOnDemand.data;
    
    public Users UsersDataOnDemand.getNewTransientUsers(int index) {
        Users obj = new Users();
        setEnabledDa(obj, index);
        setPasswordDa(obj, index);
        setUsernameDa(obj, index);
        return obj;
    }
    
    public void UsersDataOnDemand.setEnabledDa(Users obj, int index) {
        Boolean enabledDa = Boolean.TRUE;
        obj.setEnabledDa(enabledDa);
    }
    
    public void UsersDataOnDemand.setPasswordDa(Users obj, int index) {
        String passwordDa = "passwordDa_" + index;
        if (passwordDa.length() > 100) {
            passwordDa = passwordDa.substring(0, 100);
        }
        obj.setPasswordDa(passwordDa);
    }
    
    public void UsersDataOnDemand.setUsernameDa(Users obj, int index) {
        String usernameDa = "usernameDa_" + index;
        if (usernameDa.length() > 30) {
            usernameDa = usernameDa.substring(0, 30);
        }
        obj.setUsernameDa(usernameDa);
    }
    
    public Users UsersDataOnDemand.getSpecificUsers(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Users obj = data.get(index);
        Long id = obj.getId();
        return Users.findUsers(id);
    }
    
    public Users UsersDataOnDemand.getRandomUsers() {
        init();
        Users obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Users.findUsers(id);
    }
    
    public boolean UsersDataOnDemand.modifyUsers(Users obj) {
        return false;
    }
    
    public void UsersDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Users.findUsersEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Users' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Users>();
        for (int i = 0; i < 10; i++) {
            Users obj = getNewTransientUsers(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
